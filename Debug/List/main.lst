###############################################################################
#
# IAR C/C++ Compiler V8.10.2.1069/W32 for MSP430          02/Aug/2023  16:47:25
# Copyright 1996-2022 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 8.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        C:\Siddharth\Personal\Embedded C\IAR_programs\SpeedometerDesign\main.c
#    Command line  =  
#        -f "C:\Siddharth\Personal\Embedded
#        C\IAR_programs\SpeedometerDesign\Debug\Obj\main.r43.rsp"
#        ("C:\Siddharth\Personal\Embedded
#        C\IAR_programs\SpeedometerDesign\main.c" --preprocess=cl
#        "C:\Siddharth\Personal\Embedded
#        C\IAR_programs\SpeedometerDesign\Debug\List\\" -lCN
#        "C:\Siddharth\Personal\Embedded
#        C\IAR_programs\SpeedometerDesign\Debug\List\\" -o
#        "C:\Siddharth\Personal\Embedded
#        C\IAR_programs\SpeedometerDesign\Debug\Obj\\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430G2553__ -e
#        --double=32 --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\430\lib\dlib\dl430fn.h" -Ol) --dependencies=n
#        "C:\Siddharth\Personal\Embedded
#        C\IAR_programs\SpeedometerDesign\Debug\Obj\main.r43.iar_deps"
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Siddharth\Personal\Embedded
#        C\IAR_programs\SpeedometerDesign\Debug\List\\main.lst
#    Object file   =  
#        C:\Siddharth\Personal\Embedded
#        C\IAR_programs\SpeedometerDesign\Debug\Obj\\main.r43
#
###############################################################################

C:\Siddharth\Personal\Embedded C\IAR_programs\SpeedometerDesign\main.c
      1          /*************************************************************************/
      2          /*  File name: 	main.c
      3          *
      4          *  Purpose:	Main application in which the end user can invoke the
      5          *              services provided to get RPM, Pulse per second, Speed
      6          *              using the Hall Sensor and blink LED in ISR if required.
      7          *
      8          *  Owner:  	Srividya Prasad, Siddharth D Srinivas, Gaurav Sai Palasari
      9          *
     10          *  Department:   ECE, ECE, EEE
     11          *
     12          *  Version History:
     13          *  V4.0  30 July, 2023        Final version created
     14          */
     15          /******************************************************************************/
     16          
     17          #include "hal.h"

   \                                 In  segment DATA16_AN, at 0x120
   \   union <unnamed> volatile _A_WDTCTL
   \                     _A_WDTCTL:
   \   000000                DS8 2
     18          #include "io430.h"
     19          #include <stdio.h>
     20          
     21          void AppCB();
     22          
     23          /********************************************
     24          
     25            Name: main
     26            Parameters: None
     27            Return: None
     28            Description: The main application of the program. Initializes the LED and Hall effect sensor, sets the wheel diameter,
     29                        enables global interrupts, and sets the callback function for Hall effect sensor events.
     30                        Enters an infinite loop to process the Hall effect sensor and display the output continuously.*/
     31                          

   \                                 In  segment CODE, align 2
     32          void main( void )
   \                     main:
     33          {
     34            // Stop watchdog timer to prevent time out reset
     35            WDTCTL = WDTPW + WDTHOLD;
   \   000000   B240805A2001 MOV.W   #0x5a80, &0x120
     36            
     37            //LED port is 0 set in drv
     38            hal_ledInit(); 
   \   000006   B012....     CALL    #hal_ledInit
     39            
     40            //Hall Sensor port is 3 set in drv
     41            hal_hallInit();
   \   00000A   B012....     CALL    #hal_hallInit
     42            
     43            hal_setWheelDia(0.06); // Set the diameter in metres.
   \   00000E   3C408FC2     MOV.W   #0xc28f, R12
   \   000012   3D40753D     MOV.W   #0x3d75, R13
   \   000016   B012....     CALL    #hal_setWheelDia
     44            
     45            __enable_interrupt(); // Enable global interrupts
   \   00001A   32D2         EINT
     46            
     47            hal_setCB_HallSensor(AppCB);
   \   00001C   3C40....     MOV.W   #AppCB, R12
   \   000020   B012....     CALL    #hal_setCB_HallSensor
     48            
     49            while (1)
     50            {
     51              hal_process_HallSensor();
   \                     ??main_0:
   \   000024   B012....     CALL    #hal_process_HallSensor
     52              hal_printRPM();
   \   000028   B012....     CALL    #hal_printRPM
     53              hal_printPPS();
   \   00002C   B012....     CALL    #hal_printPPS
     54              hal_printSpeed_mps();
   \   000030   B012....     CALL    #hal_printSpeed_mps
   \   000034   F73F         JMP     ??main_0
   \   000036                REQUIRE _A_WDTCTL
     55              
     56              /* More usecases:
     57          
     58                if(getRPM()>120)
     59                  printf("Speed limit exceeded.");
     60          
     61                printf("Speed in kmph: %f", hal_getSpeed_mps()*3.6); */
     62            }
     63          }
     64          
     65          /*************************************
     66          
     67            Name: AppCB
     68            Parameters: None
     69            Return: None
     70            Description: Callback function called by the Hall effect sensor interrupt. Blinks the LED.*/
     71          

   \                                 In  segment CODE, align 2
     72          void AppCB()
   \                     AppCB:
     73          {
     74            // Blink the LED
     75            hal_blinkLED();  
   \   000000   B012....     CALL    #hal_blinkLED
     76          }
   \   000004   3041         RET

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   AppCB
        2   -> hal_blinkLED
      2   main
        2   -> hal_hallInit
        2   -> hal_ledInit
        2   -> hal_printPPS
        2   -> hal_printRPM
        2   -> hal_printSpeed_mps
        2   -> hal_process_HallSensor
        2   -> hal_setCB_HallSensor
        2   -> hal_setWheelDia


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  AppCB
       2  _A_WDTCTL
      54  main

 
 60 bytes in segment CODE
  2 bytes in segment DATA16_AN
 
 60 bytes of CODE memory
  0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
